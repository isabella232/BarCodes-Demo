"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RealmFactory_1 = require("../../RealmFactory");
class PasswordSaltHash {
}
PasswordSaltHash.schema = {
    name: 'PasswordSaltHash',
    primaryKey: 'userId',
    properties: {
        userId: { type: 'string', optional: false },
        salt: { type: 'string', optional: false },
        iterations: { type: 'int', optional: false },
        keyLength: { type: 'int', optional: false },
        digest: { type: 'string', optional: false },
        hash: { type: 'string', optional: false },
        isEmailConfirmed: { type: 'bool', optional: true }
    }
};
exports.PasswordSaltHash = PasswordSaltHash;
class PasswordResetRequest {
}
PasswordResetRequest.schema = {
    name: 'PasswordResetRequest',
    primaryKey: 'token',
    properties: {
        token: { type: 'string', optional: false },
        userId: { type: 'string', optional: false, indexed: true },
        expires: { type: 'date', optional: false },
        consumed: { type: 'date', optional: true },
    }
};
exports.PasswordResetRequest = PasswordResetRequest;
class EmailConfirmationRequest {
}
EmailConfirmationRequest.schema = {
    name: 'EmailConfirmationRequest',
    primaryKey: 'token',
    properties: {
        token: { type: 'string', optional: false },
        userId: { type: 'string', optional: false, indexed: true },
        email: { type: 'string', optional: false },
        expires: { type: 'date', optional: false },
        consumed: { type: 'date', optional: true },
    }
};
exports.EmailConfirmationRequest = EmailConfirmationRequest;
exports.PasswordRealm = {
    remotePath: "/__password",
    localPath: "realms/__password.realm",
    schema: [
        RealmFactory_1.createRealmSchema(PasswordSaltHash),
        RealmFactory_1.createRealmSchema(PasswordResetRequest),
        RealmFactory_1.createRealmSchema(EmailConfirmationRequest)
    ],
};
//# sourceMappingURL=PasswordRealm.js.map